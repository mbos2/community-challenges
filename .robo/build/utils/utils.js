//@ts-nocheck
import { ActionRowBuilder, ModalBuilder, TextInputBuilder, TextInputStyle, ButtonBuilder, ButtonStyle } from "discord.js";
import { Flashcore } from "@roboplay/robo.js";
export const challengeModal = async ()=>{
    const modal = new ModalBuilder().setCustomId('Challenge Modal').setTitle('Submit a challenge');
    const content = new TextInputBuilder().setCustomId('challenge').setLabel("Challenge content").setStyle(TextInputStyle.Paragraph).setRequired(true).setPlaceholder('Your challenge content here! It supports discord markdown!').setMinLength(200).setMaxLength(4000);
    const firstActionRow = new ActionRowBuilder().addComponents(content);
    modal.addComponents(firstActionRow);
    return {
        modal: modal
    };
};
export const challengeReviewButtonComponent = ()=>{
    const approve = new ButtonBuilder().setCustomId('approveChallenge').setLabel('Approve').setStyle(ButtonStyle.Success);
    const cancel = new ButtonBuilder().setCustomId('rejectChallenge').setLabel('Reject').setStyle(ButtonStyle.Secondary);
    const row = new ActionRowBuilder().addComponents(approve, cancel);
    return row;
};
export const isAdmin = (bitfield)=>{
    const adminBit = 8; // The bit for the ADMINISTRATOR permission
    return (bitfield & BigInt(adminBit)) === BigInt(adminBit);
};
export const userHasPermission = async (user, guildOwnerId)=>{
    let hasPermission = false;
    if (user.id === guildOwnerId) {
        hasPermission = true;
        return hasPermission;
    }
    const roles = await Flashcore.get('challenges-admin-roles');
    const parsedRoles = JSON.parse(roles);
    const userRoles = user.roles.cache;
    userRoles.forEach((role)=>{
        const id = role.id;
        const exists = parsedRoles.some((obj)=>obj.value === id);
        if (exists) {
            hasPermission = true;
            return hasPermission;
        }
    });
    return hasPermission;
};
export const listChallengeRoles = async ()=>{
    const choices = [];
    const existingRolesFlashcore = await Flashcore.get('challenges-admin-roles');
    const existingRoles = existingRolesFlashcore ? JSON.parse(existingRolesFlashcore) : [];
    existingRoles && existingRoles.map((role)=>{
        if (typeof role === 'object' && 'name' in role && 'id' in role) {
            choices.push({
                name: role.name,
                value: role.id
            });
        }
    });
    return choices;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxQcm9qZWt0aVxcZGlzY29yZC1ib3RzXFxyb2JvLXBsdWdpbnNcXHJvYm8tcGx1Z2luLWNoYWxsZW5nZXNcXHNyY1xcdXRpbHNcXHV0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vQHRzLW5vY2hlY2tcclxuaW1wb3J0IHsgXHJcbiAgQWN0aW9uUm93QnVpbGRlciwgXHJcbiAgTW9kYWxCdWlsZGVyLCBcclxuICBUZXh0SW5wdXRCdWlsZGVyLCBcclxuICBUZXh0SW5wdXRTdHlsZSxcclxuICBCdXR0b25CdWlsZGVyLFxyXG4gIEJ1dHRvblN0eWxlXHJcbn0gZnJvbSAnZGlzY29yZC5qcyc7XHJcbmltcG9ydCB7IEZsYXNoY29yZSB9IGZyb20gJ0Byb2JvcGxheS9yb2JvLmpzJztcclxuXHJcbmV4cG9ydCBjb25zdCBjaGFsbGVuZ2VNb2RhbCA9IGFzeW5jICgpID0+IHtcclxuICBjb25zdCBtb2RhbCA9IG5ldyBNb2RhbEJ1aWxkZXIoKVxyXG4gIC5zZXRDdXN0b21JZCgnQ2hhbGxlbmdlIE1vZGFsJylcclxuICAuc2V0VGl0bGUoJ1N1Ym1pdCBhIGNoYWxsZW5nZScpO1xyXG5cclxuICBjb25zdCBjb250ZW50ID0gbmV3IFRleHRJbnB1dEJ1aWxkZXIoKVxyXG4gICAgLnNldEN1c3RvbUlkKCdjaGFsbGVuZ2UnKVxyXG4gICAgLnNldExhYmVsKFwiQ2hhbGxlbmdlIGNvbnRlbnRcIilcclxuICAgIC5zZXRTdHlsZShUZXh0SW5wdXRTdHlsZS5QYXJhZ3JhcGgpXHJcbiAgICAuc2V0UmVxdWlyZWQodHJ1ZSlcclxuICAgIC5zZXRQbGFjZWhvbGRlcignWW91ciBjaGFsbGVuZ2UgY29udGVudCBoZXJlISBJdCBzdXBwb3J0cyBkaXNjb3JkIG1hcmtkb3duIScpXHJcbiAgICAuc2V0TWluTGVuZ3RoKDIwMClcclxuICAgIC5zZXRNYXhMZW5ndGgoNDAwMCk7XHJcblxyXG4gIGNvbnN0IGZpcnN0QWN0aW9uUm93ID0gbmV3IEFjdGlvblJvd0J1aWxkZXIoKS5hZGRDb21wb25lbnRzKGNvbnRlbnQpO1xyXG5cclxuICBtb2RhbC5hZGRDb21wb25lbnRzKGZpcnN0QWN0aW9uUm93KTtcclxuICByZXR1cm4ge1xyXG4gICAgbW9kYWw6IG1vZGFsLFxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGNoYWxsZW5nZVJldmlld0J1dHRvbkNvbXBvbmVudCA9ICgpID0+IHtcclxuICBjb25zdCBhcHByb3ZlID0gbmV3IEJ1dHRvbkJ1aWxkZXIoKVxyXG4gIC5zZXRDdXN0b21JZCgnYXBwcm92ZUNoYWxsZW5nZScpXHJcbiAgLnNldExhYmVsKCdBcHByb3ZlJylcclxuICAuc2V0U3R5bGUoQnV0dG9uU3R5bGUuU3VjY2Vzcyk7XHJcblxyXG4gIGNvbnN0IGNhbmNlbCA9IG5ldyBCdXR0b25CdWlsZGVyKClcclxuICAgIC5zZXRDdXN0b21JZCgncmVqZWN0Q2hhbGxlbmdlJylcclxuICAgIC5zZXRMYWJlbCgnUmVqZWN0JylcclxuICAgIC5zZXRTdHlsZShCdXR0b25TdHlsZS5TZWNvbmRhcnkpO1xyXG5cclxuICBjb25zdCByb3cgPSBuZXcgQWN0aW9uUm93QnVpbGRlcigpXHJcbiAgLmFkZENvbXBvbmVudHMoYXBwcm92ZSwgY2FuY2VsKTtcclxuXHJcbiAgcmV0dXJuIHJvdztcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGlzQWRtaW4gPSAoYml0ZmllbGQ6IGFueSkgPT4ge1xyXG4gIGNvbnN0IGFkbWluQml0ID0gODsgLy8gVGhlIGJpdCBmb3IgdGhlIEFETUlOSVNUUkFUT1IgcGVybWlzc2lvblxyXG4gIHJldHVybiAoYml0ZmllbGQgJiBCaWdJbnQoYWRtaW5CaXQpKSA9PT0gQmlnSW50KGFkbWluQml0KTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCB1c2VySGFzUGVybWlzc2lvbiA9IGFzeW5jICh1c2VyOiBhbnksIGd1aWxkT3duZXJJZCkgPT4ge1xyXG4gIGxldCBoYXNQZXJtaXNzaW9uID0gZmFsc2U7XHJcbiAgaWYgKHVzZXIuaWQgPT09IGd1aWxkT3duZXJJZCkge1xyXG4gICAgaGFzUGVybWlzc2lvbiA9IHRydWU7XHJcbiAgICByZXR1cm4gaGFzUGVybWlzc2lvbjtcclxuICB9XHJcblxyXG4gIGNvbnN0IHJvbGVzID0gYXdhaXQgRmxhc2hjb3JlLmdldCgnY2hhbGxlbmdlcy1hZG1pbi1yb2xlcycpIGFzIHN0cmluZztcclxuICBjb25zdCBwYXJzZWRSb2xlcyA9IEpTT04ucGFyc2Uocm9sZXMpO1xyXG4gIGNvbnN0IHVzZXJSb2xlcyA9IHVzZXIucm9sZXMuY2FjaGU7XHJcblxyXG4gIHVzZXJSb2xlcy5mb3JFYWNoKChyb2xlKSA9PiB7XHJcbiAgICBjb25zdCBpZCA9IHJvbGUuaWQ7XHJcbiAgICBjb25zdCBleGlzdHMgPSBwYXJzZWRSb2xlcy5zb21lKChvYmopID0+IG9iai52YWx1ZSA9PT0gaWQpO1xyXG4gICAgaWYgKGV4aXN0cykge1xyXG4gICAgICBoYXNQZXJtaXNzaW9uID0gdHJ1ZTtcclxuICAgICAgcmV0dXJuIGhhc1Blcm1pc3Npb247XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiBoYXNQZXJtaXNzaW9uO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgbGlzdENoYWxsZW5nZVJvbGVzID0gYXN5bmMgKCkgPT4ge1xyXG4gIGNvbnN0IGNob2ljZXM6IGFueSA9IFtdO1xyXG4gIGNvbnN0IGV4aXN0aW5nUm9sZXNGbGFzaGNvcmUgPSBhd2FpdCBGbGFzaGNvcmUuZ2V0KCdjaGFsbGVuZ2VzLWFkbWluLXJvbGVzJykgYXMgc3RyaW5nO1xyXG4gIGNvbnN0IGV4aXN0aW5nUm9sZXMgPSBleGlzdGluZ1JvbGVzRmxhc2hjb3JlID8gSlNPTi5wYXJzZShleGlzdGluZ1JvbGVzRmxhc2hjb3JlKSA6IFtdO1xyXG4gIGV4aXN0aW5nUm9sZXMgJiYgXHJcbiAgICBleGlzdGluZ1JvbGVzLm1hcCgocm9sZTogYW55KSA9PiB7XHJcbiAgICAgIGlmICh0eXBlb2Ygcm9sZSA9PT0gJ29iamVjdCcgJiYgJ25hbWUnIGluIHJvbGUgJiYgJ2lkJyBpbiByb2xlKSB7XHJcbiAgICAgICAgY2hvaWNlcy5wdXNoKHtcclxuICAgICAgICAgIG5hbWU6IHJvbGUubmFtZSxcclxuICAgICAgICAgIHZhbHVlOiByb2xlLmlkLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgcmV0dXJuIGNob2ljZXM7XHJcbn0iXSwibmFtZXMiOlsiQWN0aW9uUm93QnVpbGRlciIsIk1vZGFsQnVpbGRlciIsIlRleHRJbnB1dEJ1aWxkZXIiLCJUZXh0SW5wdXRTdHlsZSIsIkJ1dHRvbkJ1aWxkZXIiLCJCdXR0b25TdHlsZSIsIkZsYXNoY29yZSIsImNoYWxsZW5nZU1vZGFsIiwibW9kYWwiLCJzZXRDdXN0b21JZCIsInNldFRpdGxlIiwiY29udGVudCIsInNldExhYmVsIiwic2V0U3R5bGUiLCJQYXJhZ3JhcGgiLCJzZXRSZXF1aXJlZCIsInNldFBsYWNlaG9sZGVyIiwic2V0TWluTGVuZ3RoIiwic2V0TWF4TGVuZ3RoIiwiZmlyc3RBY3Rpb25Sb3ciLCJhZGRDb21wb25lbnRzIiwiY2hhbGxlbmdlUmV2aWV3QnV0dG9uQ29tcG9uZW50IiwiYXBwcm92ZSIsIlN1Y2Nlc3MiLCJjYW5jZWwiLCJTZWNvbmRhcnkiLCJyb3ciLCJpc0FkbWluIiwiYml0ZmllbGQiLCJhZG1pbkJpdCIsIkJpZ0ludCIsInVzZXJIYXNQZXJtaXNzaW9uIiwidXNlciIsImd1aWxkT3duZXJJZCIsImhhc1Blcm1pc3Npb24iLCJpZCIsInJvbGVzIiwiZ2V0IiwicGFyc2VkUm9sZXMiLCJKU09OIiwicGFyc2UiLCJ1c2VyUm9sZXMiLCJjYWNoZSIsImZvckVhY2giLCJyb2xlIiwiZXhpc3RzIiwic29tZSIsIm9iaiIsInZhbHVlIiwibGlzdENoYWxsZW5nZVJvbGVzIiwiY2hvaWNlcyIsImV4aXN0aW5nUm9sZXNGbGFzaGNvcmUiLCJleGlzdGluZ1JvbGVzIiwibWFwIiwicHVzaCIsIm5hbWUiXSwibWFwcGluZ3MiOiJBQUFB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