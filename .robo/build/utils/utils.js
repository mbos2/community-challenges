//@ts-nocheck
import { ActionRowBuilder, ModalBuilder, TextInputBuilder, TextInputStyle, ButtonBuilder, ButtonStyle } from "discord.js";
import { Flashcore } from "@roboplay/robo.js";
export const challengeModal = async ()=>{
    const modal = new ModalBuilder().setCustomId('Challenge Modal').setTitle('Submit a challenge');
    const content = new TextInputBuilder().setCustomId('challenge').setLabel("Challenge content").setStyle(TextInputStyle.Paragraph).setRequired(true).setPlaceholder('Your challenge content here! It supports discord markdown!').setMinLength(200).setMaxLength(4000);
    const firstActionRow = new ActionRowBuilder().addComponents(content);
    modal.addComponents(firstActionRow);
    return {
        modal: modal
    };
};
export const challengeReviewButtonComponent = ()=>{
    const approve = new ButtonBuilder().setCustomId('approveChallenge').setLabel('Approve').setStyle(ButtonStyle.Success);
    const cancel = new ButtonBuilder().setCustomId('rejectChallenge').setLabel('Reject').setStyle(ButtonStyle.Secondary);
    const row = new ActionRowBuilder().addComponents(approve, cancel);
    return row;
};
export const isAdmin = (bitfield)=>{
    const adminBit = 8; // The bit for the ADMINISTRATOR permission
    return (bitfield & BigInt(adminBit)) === BigInt(adminBit);
};
export const userHasPermission = async (user, guildOwnerId)=>{
    let hasPermission = false;
    if (user.id === guildOwnerId) {
        hasPermission = true;
        return hasPermission;
    }
    const roles = await Flashcore.get('challenges-admin-roles');
    const parsedRoles = JSON.parse(roles);
    const userRoles = user.roles.cache;
    userRoles.forEach((role)=>{
        const id = role.id;
        const exists = parsedRoles.some((obj)=>obj.value === id);
        if (exists) {
            hasPermission = true;
            return hasPermission;
        }
    });
    return hasPermission;
};
export const listChallengeRoles = async ()=>{
    const choices = [];
    const existingRolesFlashcore = await Flashcore.get('challenges-admin-roles');
    const existingRoles = existingRolesFlashcore ? JSON.parse(existingRolesFlashcore) : [];
    existingRoles && existingRoles.map((role)=>{
        if (typeof role === 'object' && 'name' in role && 'id' in role) {
            choices.push({
                name: role.name,
                value: role.id
            });
        }
    });
    return choices;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxQcm9qZWt0aVxcZGlzY29yZC1ib3RzXFxyb2JvLXBsdWdpbnNcXGNvbW11bml0eS1jaGFsbGVuZ2VzXFxzcmNcXHV0aWxzXFx1dGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvL0B0cy1ub2NoZWNrXHJcbmltcG9ydCB7IFxyXG4gIEFjdGlvblJvd0J1aWxkZXIsIFxyXG4gIE1vZGFsQnVpbGRlciwgXHJcbiAgVGV4dElucHV0QnVpbGRlciwgXHJcbiAgVGV4dElucHV0U3R5bGUsXHJcbiAgQnV0dG9uQnVpbGRlcixcclxuICBCdXR0b25TdHlsZVxyXG59IGZyb20gJ2Rpc2NvcmQuanMnO1xyXG5pbXBvcnQgeyBGbGFzaGNvcmUgfSBmcm9tICdAcm9ib3BsYXkvcm9iby5qcyc7XHJcblxyXG5leHBvcnQgY29uc3QgY2hhbGxlbmdlTW9kYWwgPSBhc3luYyAoKSA9PiB7XHJcbiAgY29uc3QgbW9kYWwgPSBuZXcgTW9kYWxCdWlsZGVyKClcclxuICAuc2V0Q3VzdG9tSWQoJ0NoYWxsZW5nZSBNb2RhbCcpXHJcbiAgLnNldFRpdGxlKCdTdWJtaXQgYSBjaGFsbGVuZ2UnKTtcclxuXHJcbiAgY29uc3QgY29udGVudCA9IG5ldyBUZXh0SW5wdXRCdWlsZGVyKClcclxuICAgIC5zZXRDdXN0b21JZCgnY2hhbGxlbmdlJylcclxuICAgIC5zZXRMYWJlbChcIkNoYWxsZW5nZSBjb250ZW50XCIpXHJcbiAgICAuc2V0U3R5bGUoVGV4dElucHV0U3R5bGUuUGFyYWdyYXBoKVxyXG4gICAgLnNldFJlcXVpcmVkKHRydWUpXHJcbiAgICAuc2V0UGxhY2Vob2xkZXIoJ1lvdXIgY2hhbGxlbmdlIGNvbnRlbnQgaGVyZSEgSXQgc3VwcG9ydHMgZGlzY29yZCBtYXJrZG93biEnKVxyXG4gICAgLnNldE1pbkxlbmd0aCgyMDApXHJcbiAgICAuc2V0TWF4TGVuZ3RoKDQwMDApO1xyXG5cclxuICBjb25zdCBmaXJzdEFjdGlvblJvdyA9IG5ldyBBY3Rpb25Sb3dCdWlsZGVyKCkuYWRkQ29tcG9uZW50cyhjb250ZW50KTtcclxuXHJcbiAgbW9kYWwuYWRkQ29tcG9uZW50cyhmaXJzdEFjdGlvblJvdyk7XHJcbiAgcmV0dXJuIHtcclxuICAgIG1vZGFsOiBtb2RhbCxcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBjaGFsbGVuZ2VSZXZpZXdCdXR0b25Db21wb25lbnQgPSAoKSA9PiB7XHJcbiAgY29uc3QgYXBwcm92ZSA9IG5ldyBCdXR0b25CdWlsZGVyKClcclxuICAuc2V0Q3VzdG9tSWQoJ2FwcHJvdmVDaGFsbGVuZ2UnKVxyXG4gIC5zZXRMYWJlbCgnQXBwcm92ZScpXHJcbiAgLnNldFN0eWxlKEJ1dHRvblN0eWxlLlN1Y2Nlc3MpO1xyXG5cclxuICBjb25zdCBjYW5jZWwgPSBuZXcgQnV0dG9uQnVpbGRlcigpXHJcbiAgICAuc2V0Q3VzdG9tSWQoJ3JlamVjdENoYWxsZW5nZScpXHJcbiAgICAuc2V0TGFiZWwoJ1JlamVjdCcpXHJcbiAgICAuc2V0U3R5bGUoQnV0dG9uU3R5bGUuU2Vjb25kYXJ5KTtcclxuXHJcbiAgY29uc3Qgcm93ID0gbmV3IEFjdGlvblJvd0J1aWxkZXIoKVxyXG4gIC5hZGRDb21wb25lbnRzKGFwcHJvdmUsIGNhbmNlbCk7XHJcblxyXG4gIHJldHVybiByb3c7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBpc0FkbWluID0gKGJpdGZpZWxkOiBhbnkpID0+IHtcclxuICBjb25zdCBhZG1pbkJpdCA9IDg7IC8vIFRoZSBiaXQgZm9yIHRoZSBBRE1JTklTVFJBVE9SIHBlcm1pc3Npb25cclxuICByZXR1cm4gKGJpdGZpZWxkICYgQmlnSW50KGFkbWluQml0KSkgPT09IEJpZ0ludChhZG1pbkJpdCk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgdXNlckhhc1Blcm1pc3Npb24gPSBhc3luYyAodXNlcjogYW55LCBndWlsZE93bmVySWQpID0+IHtcclxuICBsZXQgaGFzUGVybWlzc2lvbiA9IGZhbHNlO1xyXG4gIGlmICh1c2VyLmlkID09PSBndWlsZE93bmVySWQpIHtcclxuICAgIGhhc1Blcm1pc3Npb24gPSB0cnVlO1xyXG4gICAgcmV0dXJuIGhhc1Blcm1pc3Npb247XHJcbiAgfVxyXG5cclxuICBjb25zdCByb2xlcyA9IGF3YWl0IEZsYXNoY29yZS5nZXQoJ2NoYWxsZW5nZXMtYWRtaW4tcm9sZXMnKSBhcyBzdHJpbmc7XHJcbiAgY29uc3QgcGFyc2VkUm9sZXMgPSBKU09OLnBhcnNlKHJvbGVzKTtcclxuICBjb25zdCB1c2VyUm9sZXMgPSB1c2VyLnJvbGVzLmNhY2hlO1xyXG5cclxuICB1c2VyUm9sZXMuZm9yRWFjaCgocm9sZSkgPT4ge1xyXG4gICAgY29uc3QgaWQgPSByb2xlLmlkO1xyXG4gICAgY29uc3QgZXhpc3RzID0gcGFyc2VkUm9sZXMuc29tZSgob2JqKSA9PiBvYmoudmFsdWUgPT09IGlkKTtcclxuICAgIGlmIChleGlzdHMpIHtcclxuICAgICAgaGFzUGVybWlzc2lvbiA9IHRydWU7XHJcbiAgICAgIHJldHVybiBoYXNQZXJtaXNzaW9uO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gaGFzUGVybWlzc2lvbjtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGxpc3RDaGFsbGVuZ2VSb2xlcyA9IGFzeW5jICgpID0+IHtcclxuICBjb25zdCBjaG9pY2VzOiBhbnkgPSBbXTtcclxuICBjb25zdCBleGlzdGluZ1JvbGVzRmxhc2hjb3JlID0gYXdhaXQgRmxhc2hjb3JlLmdldCgnY2hhbGxlbmdlcy1hZG1pbi1yb2xlcycpIGFzIHN0cmluZztcclxuICBjb25zdCBleGlzdGluZ1JvbGVzID0gZXhpc3RpbmdSb2xlc0ZsYXNoY29yZSA/IEpTT04ucGFyc2UoZXhpc3RpbmdSb2xlc0ZsYXNoY29yZSkgOiBbXTtcclxuICBleGlzdGluZ1JvbGVzICYmIFxyXG4gICAgZXhpc3RpbmdSb2xlcy5tYXAoKHJvbGU6IGFueSkgPT4ge1xyXG4gICAgICBpZiAodHlwZW9mIHJvbGUgPT09ICdvYmplY3QnICYmICduYW1lJyBpbiByb2xlICYmICdpZCcgaW4gcm9sZSkge1xyXG4gICAgICAgIGNob2ljZXMucHVzaCh7XHJcbiAgICAgICAgICBuYW1lOiByb2xlLm5hbWUsXHJcbiAgICAgICAgICB2YWx1ZTogcm9sZS5pZCxcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gIHJldHVybiBjaG9pY2VzO1xyXG59Il0sIm5hbWVzIjpbIkFjdGlvblJvd0J1aWxkZXIiLCJNb2RhbEJ1aWxkZXIiLCJUZXh0SW5wdXRCdWlsZGVyIiwiVGV4dElucHV0U3R5bGUiLCJCdXR0b25CdWlsZGVyIiwiQnV0dG9uU3R5bGUiLCJGbGFzaGNvcmUiLCJjaGFsbGVuZ2VNb2RhbCIsIm1vZGFsIiwic2V0Q3VzdG9tSWQiLCJzZXRUaXRsZSIsImNvbnRlbnQiLCJzZXRMYWJlbCIsInNldFN0eWxlIiwiUGFyYWdyYXBoIiwic2V0UmVxdWlyZWQiLCJzZXRQbGFjZWhvbGRlciIsInNldE1pbkxlbmd0aCIsInNldE1heExlbmd0aCIsImZpcnN0QWN0aW9uUm93IiwiYWRkQ29tcG9uZW50cyIsImNoYWxsZW5nZVJldmlld0J1dHRvbkNvbXBvbmVudCIsImFwcHJvdmUiLCJTdWNjZXNzIiwiY2FuY2VsIiwiU2Vjb25kYXJ5Iiwicm93IiwiaXNBZG1pbiIsImJpdGZpZWxkIiwiYWRtaW5CaXQiLCJCaWdJbnQiLCJ1c2VySGFzUGVybWlzc2lvbiIsInVzZXIiLCJndWlsZE93bmVySWQiLCJoYXNQZXJtaXNzaW9uIiwiaWQiLCJyb2xlcyIsImdldCIsInBhcnNlZFJvbGVzIiwiSlNPTiIsInBhcnNlIiwidXNlclJvbGVzIiwiY2FjaGUiLCJmb3JFYWNoIiwicm9sZSIsImV4aXN0cyIsInNvbWUiLCJvYmoiLCJ2YWx1ZSIsImxpc3RDaGFsbGVuZ2VSb2xlcyIsImNob2ljZXMiLCJleGlzdGluZ1JvbGVzRmxhc2hjb3JlIiwiZXhpc3RpbmdSb2xlcyIsIm1hcCIsInB1c2giLCJuYW1lIl0sIm1hcHBpbmdzIjoiQUFBQSxh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